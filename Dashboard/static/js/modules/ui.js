/**
 * UI„É¢„Ç∏„É•„Éº„É´ - Phase 2-B
 * UIË¶ÅÁ¥†„ÅÆÁÆ°ÁêÜ„Å®Êõ¥Êñ∞
 */

export class UIManager {
    constructor() {
        this.lastActivityTime = Date.now();
        this.updateInterval = 5000;
        this.elements = {};
        this.initializeElements();
    }
    
    /**
     * DOMË¶ÅÁ¥†„ÇíÂàùÊúüÂåñ
     */
    initializeElements() {
        // ‰∏ªË¶Å„Å™Ë¶ÅÁ¥†„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
        this.elements = {
            // Êé•Á∂öÁä∂ÊÖã
            connectionStatus: document.getElementById('connectionStatus'),
            connectionText: document.getElementById('connectionText'),
            connectionInfo: document.getElementById('connectionInfo'),
            
            // „Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†±
            balance: document.getElementById('balance'),
            equity: document.getElementById('equity'),
            profit: document.getElementById('profit'),
            marginLevel: document.getElementById('marginLevel'),
            
            // ‰ªäÊó•„ÅÆÁµêÊûú
            todayProfit: document.getElementById('todayProfit'),
            positionCount: document.getElementById('positionCount'),
            
            // Â∏ÇÂ†¥„Éá„Éº„Çø
            bid: document.getElementById('bid'),
            ask: document.getElementById('ask'),
            spread: document.getElementById('spread'),
            priceTime: document.getElementById('priceTime'),
            
            // „Åù„ÅÆ‰ªñ
            lastUpdate: document.getElementById('lastUpdate'),
            positionsList: document.getElementById('positionsList'),
            notification: document.getElementById('notification')
        };
    }
    
    /**
     * Êé•Á∂öÁä∂ÊÖã„ÇíÊõ¥Êñ∞
     * @param {boolean} connected - Êé•Á∂öÁä∂ÊÖã
     */
    updateConnectionStatus(connected) {
        if (!this.elements.connectionStatus) return;
        
        if (connected) {
            this.elements.connectionStatus.classList.remove('error');
            this.setText('connectionText', '„Ç™„É≥„É©„Ç§„É≥');
            this.setText('connectionInfo', 'WebSocketÊé•Á∂öÊ∏à„Åø');
        } else {
            this.elements.connectionStatus.classList.add('error');
            this.setText('connectionText', '„Ç™„Éï„É©„Ç§„É≥');
            this.setText('connectionInfo', 'Êé•Á∂ö„Ç®„É©„Éº');
        }
    }
    
    /**
     * „Ç¢„Ç´„Ç¶„É≥„ÉàÊÉÖÂ†±„ÇíÊõ¥Êñ∞
     * @param {Object} account - „Ç¢„Ç´„Ç¶„É≥„Éà„Éá„Éº„Çø
     */
    updateAccount(account) {
        if (!account) return;
        
        // ÊÆãÈ´ò
        this.setText('balance', this.formatNumber(account.balance));
        
        // ÊúâÂäπË®ºÊã†Èáë
        this.setText('equity', this.formatNumber(account.equity));
        
        // Âê´„ÅøÊêçÁõä
        const profit = account.profit || 0;
        const profitElement = this.elements.profit;
        if (profitElement) {
            profitElement.textContent = this.formatCurrency(profit);
            profitElement.className = 'account-value ' + (profit >= 0 ? 'profit-positive' : 'profit-negative');
        }
        
        // Ë®ºÊã†ÈáëÁ∂≠ÊåÅÁéá
        const marginLevel = account.margin_level;
        this.setText('marginLevel', marginLevel ? marginLevel.toFixed(2) + '%' : '-');
    }
    
    /**
     * EAÊÉÖÂ†±„ÇíÊõ¥Êñ∞
     * @param {Object} ea - EAÊÉÖÂ†±
     */
    updateEAStatus(ea) {
        if (!ea) return;
        
        // ‰ªäÊó•„ÅÆÂà©Áõä
        const todayProfit = ea.today_profit || 0;
        const todayProfitElement = this.elements.todayProfit;
        if (todayProfitElement) {
            todayProfitElement.textContent = this.formatCurrency(todayProfit);
            todayProfitElement.className = 'account-value ' + (todayProfit >= 0 ? 'profit-positive' : 'profit-negative');
        }
        
        // „Éù„Ç∏„Ç∑„Éß„É≥Êï∞
        this.setText('positionCount', ea.active_positions || 0);
    }
    
    /**
     * Â∏ÇÂ†¥„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
     * @param {Object} market - Â∏ÇÂ†¥„Éá„Éº„Çø
     */
    updateMarket(market) {
        if (!market) return;
        
        this.setText('bid', market.bid || '-');
        this.setText('ask', market.ask || '-');
        this.setText('spread', market.spread || '-');
        this.setText('priceTime', market.server_time || '-');
    }
    
    /**
     * „Éù„Ç∏„Ç∑„Éß„É≥‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
     * @param {Array} positions - „Éù„Ç∏„Ç∑„Éß„É≥ÈÖçÂàó
     */
    updatePositions(positions) {
        const positionsList = this.elements.positionsList;
        if (!positionsList) return;
        
        if (!positions || positions.length === 0) {
            positionsList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üìà</div>
                    <div>ÁèæÂú®„Éù„Ç∏„Ç∑„Éß„É≥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</div>
                </div>
            `;
            return;
        }
        
        let html = '';
        positions.forEach(position => {
            const profitClass = position.profit >= 0 ? 'profit-positive' : 'profit-negative';
            const typeClass = position.type.toLowerCase();
            
            html += `
                <div class="position-item">
                    <div class="position-left">
                        <div>
                            <span class="position-symbol">${position.symbol}</span>
                            <span class="position-type ${typeClass}">${position.type}</span>
                        </div>
                        <div class="position-details">
                            ${position.volume} lot | ÈñãÂßã: ${position.open_price} | ÊúüÈñì: ${position.duration}
                        </div>
                    </div>
                    <div class="position-right">
                        <div class="position-profit ${profitClass}">
                            ${this.formatCurrency(position.profit)}
                        </div>
                        <div class="position-pips">
                            ${position.profit_pips > 0 ? '+' : ''}${position.profit_pips} pips
                        </div>
                    </div>
                </div>
            `;
        });
        
        positionsList.innerHTML = html;
    }
    
    /**
     * ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàª„ÇíÊõ¥Êñ∞
     * @param {string} timestamp - „Çø„Ç§„É†„Çπ„Çø„É≥„Éó
     */
    updateLastUpdate(timestamp) {
        if (timestamp) {
            const time = new Date(timestamp).toLocaleTimeString('ja-JP');
            this.setText('lastUpdate', time);
        }
    }
    
    /**
     * „Çø„Éñ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
     */
    setupTabNavigation() {
        const tabButtons = document.querySelectorAll('.tab-button');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const tabId = button.getAttribute('data-tab');
                
                // „Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÅÆÊõ¥Êñ∞
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                button.classList.add('active');
                const targetTab = document.getElementById(tabId);
                if (targetTab) {
                    targetTab.classList.add('active');
                }
                
                // „Ç´„Çπ„Çø„É†„Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
                window.dispatchEvent(new CustomEvent('tabChanged', { detail: { tabId } }));
            });
        });
    }
    
    /**
     * „É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÇíËøΩË∑°
     */
    trackActivity() {
        document.addEventListener('touchstart', () => {
            this.lastActivityTime = Date.now();
        });
        
        document.addEventListener('click', () => {
            this.lastActivityTime = Date.now();
        });
    }
    
    /**
     * Èùû„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÊôÇÈñì„ÇíÂèñÂæó
     * @returns {number} Èùû„Ç¢„ÇØ„ÉÜ„Ç£„ÉñÊôÇÈñìÔºà„Éü„É™ÁßíÔºâ
     */
    getInactiveTime() {
        return Date.now() - this.lastActivityTime;
    }
    
    /**
     * „É™„Éï„É¨„ÉÉ„Ç∑„É•„Éú„Çø„É≥„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
     * @param {Function} refreshCallback - „É™„Éï„É¨„ÉÉ„Ç∑„É•ÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
     */
    setupRefreshButton(refreshCallback) {
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                refreshBtn.classList.add('loading');
                
                if (refreshCallback) {
                    refreshCallback();
                }
                
                setTimeout(() => {
                    refreshBtn.classList.remove('loading');
                }, 1000);
            });
        }
    }
    
    /**
     * Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
     */
    setupSettings() {
        // Ëá™ÂãïÊõ¥Êñ∞Ë®≠ÂÆö
        const autoRefresh = document.getElementById('autoRefresh');
        if (autoRefresh) {
            const saved = localStorage.getItem('autoRefresh');
            if (saved !== null) {
                autoRefresh.checked = saved === 'true';
            }
            
            autoRefresh.addEventListener('change', function() {
                localStorage.setItem('autoRefresh', this.checked);
                window.dispatchEvent(new CustomEvent('autoRefreshChanged', { 
                    detail: { enabled: this.checked } 
                }));
            });
        }
        
        // Èü≥Â£∞ÈÄöÁü•Ë®≠ÂÆö
        const soundNotification = document.getElementById('soundNotification');
        if (soundNotification) {
            const saved = localStorage.getItem('soundNotification');
            if (saved !== null) {
                soundNotification.checked = saved === 'true';
            }
            
            soundNotification.addEventListener('change', function() {
                localStorage.setItem('soundNotification', this.checked);
                window.dispatchEvent(new CustomEvent('soundNotificationChanged', { 
                    detail: { enabled: this.checked } 
                }));
            });
        }
    }
    
    /**
     * „ÉÜ„Ç≠„Çπ„Éà„ÇíÂÆâÂÖ®„Å´Ë®≠ÂÆö
     * @param {string} elementId - Ë¶ÅÁ¥†ID
     * @param {string} text - „ÉÜ„Ç≠„Çπ„Éà
     */
    setText(elementId, text) {
        const element = this.elements[elementId];
        if (element) {
            element.textContent = text;
        }
    }
    
    /**
     * Êï∞ÂÄ§„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
     * @param {number} num - Êï∞ÂÄ§
     * @returns {string} „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„ÅøÊñáÂ≠óÂàó
     */
    formatNumber(num) {
        if (!num && num !== 0) return '-';
        return new Intl.NumberFormat('ja-JP').format(Math.round(num));
    }
    
    /**
     * ÈÄöË≤®„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
     * @param {number} num - Êï∞ÂÄ§
     * @returns {string} „Éï„Ç©„Éº„Éû„ÉÉ„ÉàÊ∏à„ÅøÊñáÂ≠óÂàó
     */
    formatCurrency(num) {
        if (!num && num !== 0) return '¬•0';
        const formatted = new Intl.NumberFormat('ja-JP').format(Math.round(num));
        return (num >= 0 ? '+' : '') + '¬•' + formatted;
    }
    
    /**
     * ÈÄöÁü•„ÇíË°®Á§∫
     * @param {string} message - „É°„ÉÉ„Çª„Éº„Ç∏
     * @param {string} type - „Çø„Ç§„Éó
     */
    showNotification(message, type = 'info') {
        const notification = this.elements.notification;
        if (!notification) return;
        
        notification.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }
}