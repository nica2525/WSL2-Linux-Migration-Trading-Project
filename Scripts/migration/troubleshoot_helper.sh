#!/bin/bash
# „Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„Éª„Çµ„Éù„Éº„Éà„Çπ„ÇØ„É™„Éó„Éà - WSL2‚ÜíNative LinuxÁßªË°å
# ÂÆüË°å: bash troubleshoot_helper.sh

set -euo pipefail

# Ëâ≤‰ªò„Åç„É≠„Ç∞Âá∫Âäõ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_fix() {
    echo -e "${CYAN}[FIX]${NC} $1"
}

show_menu() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  Migration Troubleshooter                   ‚ïë
‚ïë                WSL2 ‚Üí Linux ÁßªË°å„Çµ„Éù„Éº„Éà                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "üîß Âà©Áî®ÂèØËÉΩ„Å™‰øÆÂæ©„Ç™„Éó„Ç∑„Éß„É≥:"
    echo "  1. Áí∞Â¢ÉÊßãÁØâÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ©"
    echo "  2. Claude CLI „Ç§„É≥„Çπ„Éà„Éº„É´ÂïèÈ°å„ÅÆ‰øÆÂæ©"
    echo "  3. „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂæ©ÂÖÉÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ©"
    echo "  4. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ©"
    echo "  5. MCPÊé•Á∂öÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ©"
    echo "  6. Ê®©ÈôêÂïèÈ°å„ÅÆ‰∏ÄÊã¨‰øÆÂæ©"
    echo "  7. ÂÖ®‰ΩìË®∫Êñ≠„ÉªÂåÖÊã¨ÁöÑ‰øÆÂæ©"
    echo "  8. „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Ë°®Á§∫"
    echo "  9. „É≠„Ç∞„Éï„Ç°„Ç§„É´ÂàÜÊûê"
    echo "  0. ÁµÇ‰∫Ü"
    echo
}

main() {
    while true; do
        show_menu
        read -p "ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ (0-9): " choice
        echo
        
        case $choice in
            1) fix_environment_issues ;;
            2) fix_claude_installation ;;
            3) fix_project_restoration ;;
            4) fix_config_files ;;
            5) fix_mcp_connection ;;
            6) fix_permissions ;;
            7) comprehensive_diagnosis ;;
            8) show_system_info ;;
            9) analyze_logs ;;
            0) 
                log_info "„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞„ÇíÁµÇ‰∫Ü„Åó„Åæ„Åô"
                exit 0
                ;;
            *)
                log_error "ÁÑ°Âäπ„Å™ÈÅ∏Êäû„Åß„Åô: $choice"
                ;;
        esac
        
        echo
        read -p "Á∂öË°å„Åô„Çã„Å´„ÅØ Enter „ÇíÊäº„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
        clear
    done
}

fix_environment_issues() {
    log_info "=== Áí∞Â¢ÉÊßãÁØâÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ© ==="
    
    # Python3Á¢∫Ë™ç„Éª‰øÆÂæ©
    if ! command -v python3 >/dev/null 2>&1; then
        log_warning "Python3„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "Python3„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        sudo apt-get update -qq
        sudo apt-get install -y python3 python3-pip
        log_success "Python3„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"
    else
        log_success "Python3Á¢∫Ë™ç: $(python3 --version)"
    fi
    
    # Node.jsÁ¢∫Ë™ç„Éª‰øÆÂæ©
    if ! command -v node >/dev/null 2>&1 || [ "$(node --version | cut -d'v' -f2 | cut -d'.' -f1)" -lt "18" ]; then
        log_warning "Node.js 18+„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "Node.js 20.x „Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt-get install -y nodejs
        log_success "Node.js„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü: $(node --version)"
    else
        log_success "Node.jsÁ¢∫Ë™ç: $(node --version)"
    fi
    
    # Âü∫Êú¨„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™ç
    MISSING_PACKAGES=()
    CHECK_PACKAGES=("curl" "wget" "git" "build-essential")
    
    for package in "${CHECK_PACKAGES[@]}"; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            MISSING_PACKAGES+=("$package")
        fi
    done
    
    if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
        log_warning "‰∏çË∂≥„Éë„ÉÉ„Ç±„Éº„Ç∏: ${MISSING_PACKAGES[*]}"
        log_fix "„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        sudo apt-get install -y "${MISSING_PACKAGES[@]}"
        log_success "„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"
    else
        log_success "Âü∫Êú¨„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™çÂÆå‰∫Ü"
    fi
    
    # Python‰æùÂ≠òÈñ¢‰øÇÁ¢∫Ë™ç
    PYTHON_PACKAGES=("pandas" "numpy" "requests" "pyyaml")
    MISSING_PYTHON=()
    
    for package in "${PYTHON_PACKAGES[@]}"; do
        if ! python3 -c "import $package" 2>/dev/null; then
            MISSING_PYTHON+=("$package")
        fi
    done
    
    if [ ${#MISSING_PYTHON[@]} -gt 0 ]; then
        log_warning "‰∏çË∂≥Python„Éë„ÉÉ„Ç±„Éº„Ç∏: ${MISSING_PYTHON[*]}"
        log_fix "Python„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        pip3 install --user "${MISSING_PYTHON[@]}"
        log_success "Python„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"
    else
        log_success "Python„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™çÂÆå‰∫Ü"
    fi
}

fix_claude_installation() {
    log_info "=== Claude CLI „Ç§„É≥„Çπ„Éà„Éº„É´ÂïèÈ°å„ÅÆ‰øÆÂæ© ==="
    
    # Claude CLIÁ¢∫Ë™ç
    if ! command -v claude >/dev/null 2>&1; then
        log_warning "Claude CLI„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "Claude CLIËá™Âãï„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆüË°å‰∏≠..."
        
        # ‰∏ÄÊôÇ„Éá„Ç£„É¨„ÇØ„Éà„É™„Åß„Çπ„ÇØ„É™„Éó„ÉàÂÆüË°å
        TEMP_DIR=$(mktemp -d)
        trap "rm -rf $TEMP_DIR" EXIT
        
        SCRIPT_URL="https://raw.githubusercontent.com/nica2525/WSL2-Linux-Migration-Trading-Project/main/Scripts/migration/claude_installation.sh"
        
        if curl -fsSL "$SCRIPT_URL" > "$TEMP_DIR/claude_installation.sh"; then
            chmod +x "$TEMP_DIR/claude_installation.sh"
            echo "y" | bash "$TEMP_DIR/claude_installation.sh"
            
            # PATHÂèçÊò†
            export PATH="$HOME/.local/bin:$PATH"
            
            if command -v claude >/dev/null 2>&1; then
                log_success "Claude CLI„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"
            else
                log_error "Claude CLI„Ç§„É≥„Çπ„Éà„Éº„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            fi
        else
            log_error "„Ç§„É≥„Çπ„Éà„Éº„É´„Çπ„ÇØ„É™„Éó„Éà„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
        fi
    else
        log_success "Claude CLIÁ¢∫Ë™ç: $(claude --version | head -1)"
        
        # Ë™çË®ºÁä∂Ê≥ÅÁ¢∫Ë™ç
        if claude whoami >/dev/null 2>&1; then
            log_success "ClaudeË™çË®ºÊ∏à„Åø"
        else
            log_warning "ClaudeÊú™Ë™çË®º„Åß„Åô"
            log_info "Ë™çË®º„Åô„Çã„Å´„ÅØ: claude auth login"
        fi
    fi
    
    # PATHÂïèÈ°å‰øÆÂæ©
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        log_warning "~/.local/bin „ÅåPATH„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        log_fix "PATHË®≠ÂÆö‰øÆÂæ©‰∏≠..."
        
        # .bashrc„Å´PATHËøΩÂä†
        if ! grep -q "export PATH=\"\$HOME/.local/bin:\$PATH\"" "$HOME/.bashrc"; then
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
            log_success ".bashrc„Å´PATHË®≠ÂÆöËøΩÂä†ÂÆå‰∫Ü"
        fi
        
        export PATH="$HOME/.local/bin:$PATH"
        log_success "ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÅßPATHË®≠ÂÆöÂÆå‰∫Ü"
    fi
}

fix_project_restoration() {
    log_info "=== „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂæ©ÂÖÉÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ© ==="
    
    PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
    
    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™ç
    if [ ! -d "$PROJECT_DIR" ]; then
        log_warning "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂæ©ÂÖÉÂÆüË°å‰∏≠..."
        
        mkdir -p "$HOME/Trading-Development"
        cd "$HOME/Trading-Development"
        
        if git clone https://github.com/nica2525/WSL2-Linux-Migration-Trading-Project.git "2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"; then
            log_success "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇØ„É≠„Éº„É≥ÂÆå‰∫Ü"
        else
            log_error "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇØ„É≠„Éº„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            return 1
        fi
    else
        log_success "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™Á¢∫Ë™ç: $PROJECT_DIR"
    fi
    
    cd "$PROJECT_DIR"
    
    # ÈáçË¶Å„Éï„Ç°„Ç§„É´Á¢∫Ë™ç„Éª‰øÆÂæ©
    CRITICAL_FILES=(
        "CLAUDE.md"
        "MT5/EA/JamesORB_v1.0.mq5"
        "Scripts/cron_system_monitor.py"
    )
    
    MISSING_FILES=()
    for file in "${CRITICAL_FILES[@]}"; do
        if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
        fi
    done
    
    if [ ${#MISSING_FILES[@]} -gt 0 ]; then
        log_warning "‰∏çË∂≥„Éï„Ç°„Ç§„É´: ${MISSING_FILES[*]}"
        log_fix "Git pullÂÆüË°å„Åß‰øÆÂæ©‰∏≠..."
        
        git pull origin main
        log_success "„Éï„Ç°„Ç§„É´ÂêåÊúüÂÆå‰∫Ü"
    else
        log_success "ÈáçË¶Å„Éï„Ç°„Ç§„É´Á¢∫Ë™çÂÆå‰∫Ü"
    fi
    
    # ÂÆüË°åÊ®©Èôê‰øÆÂæ©
    log_fix "ÂÆüË°åÊ®©Èôê‰øÆÂæ©‰∏≠..."
    find Scripts -name "*.sh" -type f -exec chmod +x {} \; 2>/dev/null || true
    find Scripts -name "*.py" -type f -exec chmod +x {} \; 2>/dev/null || true
    log_success "ÂÆüË°åÊ®©Èôê‰øÆÂæ©ÂÆå‰∫Ü"
}

fix_config_files() {
    log_info "=== Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ© ==="
    
    CLAUDE_CONFIG="$HOME/.claude/settings.json"
    MCP_CONFIG="$HOME/.config/claude-desktop/config.json"
    
    # ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´Á¢∫Ë™ç„Éª‰øÆÂæ©
    if [ ! -f "$CLAUDE_CONFIG" ]; then
        log_warning "ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉÂÆüË°å‰∏≠..."
        
        PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
        if [ -d "$PROJECT_DIR" ] && [ -x "$PROJECT_DIR/Scripts/migration/config_restore.sh" ]; then
            cd "$PROJECT_DIR"
            echo "n" | bash Scripts/migration/config_restore.sh
            log_success "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉÂÆå‰∫Ü"
        else
            log_error "Ë®≠ÂÆöÂæ©ÂÖÉ„Çπ„ÇØ„É™„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        fi
    else
        # ÊßãÊñáÁ¢∫Ë™ç
        if python3 -m json.tool "$CLAUDE_CONFIG" >/dev/null 2>&1; then
            log_success "ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´ÊßãÊñáÁ¢∫Ë™çÂÆå‰∫Ü"
        else
            log_error "ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´ÊßãÊñá„Ç®„É©„Éº"
            log_fix "„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàêÂæå„ÄÅÂÜçÁîüÊàê„Åó„Åæ„Åô..."
            cp "$CLAUDE_CONFIG" "$CLAUDE_CONFIG.backup"
            
            # ÊúÄÂ∞èÈôê„ÅÆË®≠ÂÆö„ÅßÂÜç‰ΩúÊàê
            mkdir -p "$(dirname "$CLAUDE_CONFIG")"
            cat > "$CLAUDE_CONFIG" << 'EOF'
{
  "hooks": {},
  "slashCommands": {},
  "feedbackSurveyState": {
    "lastShownTime": 0
  }
}
EOF
            log_success "ÊúÄÂ∞èÈôê„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàêÂÆå‰∫Ü"
        fi
    fi
    
    # MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´Á¢∫Ë™ç„Éª‰øÆÂæ©
    if [ ! -f "$MCP_CONFIG" ]; then
        log_warning "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàê‰∏≠..."
        
        mkdir -p "$(dirname "$MCP_CONFIG")"
        cat > "$MCP_CONFIG" << 'EOF'
{
  "mcpServers": {
    "gemini": {
      "command": "npx",
      "args": ["-y", "@yusukedev/gemini-cli-mcp"],
      "env": {
        "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY_HERE",
        "GEMINI_MODEL": "gemini-2.0-flash",
        "GEMINI_TIMEOUT": "180000",
        "GEMINI_AUTO_FALLBACK": "true"
      }
    }
  }
}
EOF
        log_success "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàêÂÆå‰∫Ü"
        log_warning "Gemini API„Ç≠„Éº„ÅÆÊâãÂãïË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô"
    else
        if python3 -m json.tool "$MCP_CONFIG" >/dev/null 2>&1; then
            log_success "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´ÊßãÊñáÁ¢∫Ë™çÂÆå‰∫Ü"
        else
            log_error "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´ÊßãÊñá„Ç®„É©„Éº - ÂÜç‰ΩúÊàê„Åó„Åæ„Åô"
            cp "$MCP_CONFIG" "$MCP_CONFIG.backup"
            # ‰∏äË®ò„Å®Âêå„ÅòÂÜÖÂÆπ„ÅßÂÜç‰ΩúÊàê
            log_success "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´ÂÜç‰ΩúÊàêÂÆå‰∫Ü"
        fi
    fi
    
    # Ê®©Èôê‰øÆÂæ©
    chmod 600 "$CLAUDE_CONFIG" 2>/dev/null || true
    chmod 600 "$MCP_CONFIG" 2>/dev/null || true
    log_success "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©Èôê‰øÆÂæ©ÂÆå‰∫Ü"
}

fix_mcp_connection() {
    log_info "=== MCPÊé•Á∂öÂïèÈ°å„ÅÆË®∫Êñ≠„Éª‰øÆÂæ© ==="
    
    # MCP‰æùÂ≠ò„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™ç
    if ! npm list -g @yusukedev/gemini-cli-mcp >/dev/null 2>&1; then
        log_warning "MCP‰æùÂ≠ò„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_fix "MCP„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..."
        npm install -g @yusukedev/gemini-cli-mcp
        log_success "MCP„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü"
    else
        log_success "MCP„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™çÂÆå‰∫Ü"
    fi
    
    # Gemini API„Ç≠„ÉºÁ¢∫Ë™ç
    MCP_CONFIG="$HOME/.config/claude-desktop/config.json"
    if [ -f "$MCP_CONFIG" ] && grep -q "YOUR_GEMINI_API_KEY_HERE" "$MCP_CONFIG"; then
        log_warning "Gemini API„Ç≠„Éº„ÅåÊú™Ë®≠ÂÆö„Åß„Åô"
        log_info "Ë®≠ÂÆöÊñπÊ≥ï:"
        echo "  1. $MCP_CONFIG „ÇíÁ∑®ÈõÜ"
        echo "  2. YOUR_GEMINI_API_KEY_HERE „ÇíÂÆüÈöõ„ÅÆAPI„Ç≠„Éº„Å´ÁΩÆÊèõ"
        echo "  3. Claude Code„ÇíÂÜçËµ∑Âãï"
    else
        log_success "Gemini API„Ç≠„ÉºË®≠ÂÆöÁ¢∫Ë™çÂÆå‰∫Ü"
    fi
    
    # ClaudeË™çË®ºÁä∂Ê≥ÅÁ¢∫Ë™ç
    if command -v claude >/dev/null 2>&1; then
        if claude whoami >/dev/null 2>&1; then
            log_success "ClaudeË™çË®ºÁ¢∫Ë™çÂÆå‰∫Ü"
        else
            log_warning "ClaudeÊú™Ë™çË®º„Åß„Åô"
            log_info "Ë™çË®ºÊñπÊ≥ï: claude auth login"
        fi
    else
        log_error "Claude CLI„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        log_info "ÂÖà„Å´Claude CLI„ÅÆ‰øÆÂæ©„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
}

fix_permissions() {
    log_info "=== Ê®©ÈôêÂïèÈ°å„ÅÆ‰∏ÄÊã¨‰øÆÂæ© ==="
    
    PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
    
    if [ ! -d "$PROJECT_DIR" ]; then
        log_error "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return 1
    fi
    
    cd "$PROJECT_DIR"
    
    # „Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´ÂÆüË°åÊ®©Èôê
    log_fix "„Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´ÂÆüË°åÊ®©Èôê‰øÆÂæ©‰∏≠..."
    find . -name "*.sh" -type f -exec chmod +x {} \; 2>/dev/null || true
    find . -name "*.py" -type f -exec chmod +x {} \; 2>/dev/null || true
    
    # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©Èôê
    log_fix "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©Èôê‰øÆÂæ©‰∏≠..."
    chmod 600 "$HOME/.claude/settings.json" 2>/dev/null || true
    chmod 600 "$HOME/.config/claude-desktop/config.json" 2>/dev/null || true
    
    # Hooks„Éá„Ç£„É¨„ÇØ„Éà„É™Ê®©Èôê
    if [ -d "$HOME/.claude/hooks" ]; then
        chmod -R 755 "$HOME/.claude/hooks" 2>/dev/null || true
    fi
    
    log_success "Ê®©ÈôêÂïèÈ°å‰∏ÄÊã¨‰øÆÂæ©ÂÆå‰∫Ü"
}

comprehensive_diagnosis() {
    log_info "=== ÂÖ®‰ΩìË®∫Êñ≠„ÉªÂåÖÊã¨ÁöÑ‰øÆÂæ©ÈñãÂßã ==="
    
    echo "üîç ÊÆµÈöéÁöÑË®∫Êñ≠„Éª‰øÆÂæ©„ÇíÂÆüË°å„Åó„Åæ„Åô..."
    echo
    
    # ÂêÑ‰øÆÂæ©„ÇíÈ†ÜÊ¨°ÂÆüË°å
    fix_environment_issues
    echo
    
    fix_claude_installation
    echo
    
    fix_project_restoration
    echo
    
    fix_config_files
    echo
    
    fix_mcp_connection
    echo
    
    fix_permissions
    echo
    
    log_success "=== ÂåÖÊã¨ÁöÑ‰øÆÂæ©ÂÆå‰∫Ü ==="
    
    # ÊúÄÁµÇÊ§úË®ºÂÆüË°å
    PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
    if [ -d "$PROJECT_DIR" ] && [ -x "$PROJECT_DIR/Scripts/migration/migration_verification.sh" ]; then
        echo
        read -p "ÊúÄÁµÇÊ§úË®º„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            cd "$PROJECT_DIR"
            bash Scripts/migration/migration_verification.sh
        fi
    fi
}

show_system_info() {
    log_info "=== „Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±Ë°®Á§∫ ==="
    
    echo "üñ•Ô∏è „Ç∑„Çπ„ÉÜ„É†Âü∫Êú¨ÊÉÖÂ†±:"
    echo "  - OS: $(lsb_release -d 2>/dev/null | cut -f2- || uname -a)"
    echo "  - „Ç´„Éº„Éç„É´: $(uname -r)"
    echo "  - „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£: $(uname -m)"
    echo "  - „Éõ„Çπ„ÉàÂêç: $(hostname)"
    echo "  - „É¶„Éº„Ç∂„Éº: $(whoami)"
    echo "  - „Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™: $HOME"
    echo
    
    echo "üîß ÈñãÁô∫Áí∞Â¢É:"
    if command -v python3 >/dev/null 2>&1; then
        echo "  - Python: $(python3 --version)"
    else
        echo "  - Python: Êú™„Ç§„É≥„Çπ„Éà„Éº„É´"
    fi
    
    if command -v node >/dev/null 2>&1; then
        echo "  - Node.js: $(node --version)"
        echo "  - npm: $(npm --version)"
    else
        echo "  - Node.js: Êú™„Ç§„É≥„Çπ„Éà„Éº„É´"
    fi
    
    if command -v git >/dev/null 2>&1; then
        echo "  - Git: $(git --version)"
    else
        echo "  - Git: Êú™„Ç§„É≥„Çπ„Éà„Éº„É´"
    fi
    
    if command -v claude >/dev/null 2>&1; then
        echo "  - Claude CLI: $(claude --version | head -1)"
    else
        echo "  - Claude CLI: Êú™„Ç§„É≥„Çπ„Éà„Éº„É´"
    fi
    echo
    
    echo "üíæ „Éá„Ç£„Çπ„ÇØ‰ΩøÁî®Èáè:"
    df -h /
    echo
    
    echo "üß† „É°„É¢„É™‰ΩøÁî®Èáè:"
    free -h
    echo
    
    echo "üìÅ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥Å:"
    PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
    if [ -d "$PROJECT_DIR" ]; then
        echo "  - „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™: Â≠òÂú®"
        echo "  - „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çµ„Ç§„Ç∫: $(du -sh "$PROJECT_DIR" | cut -f1)"
        echo "  - „Éï„Ç°„Ç§„É´Êï∞: $(find "$PROJECT_DIR" -type f | wc -l)"
    else
        echo "  - „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™: Êú™Â≠òÂú®"
    fi
}

analyze_logs() {
    log_info "=== „É≠„Ç∞„Éï„Ç°„Ç§„É´ÂàÜÊûê ==="
    
    PROJECT_DIR="$HOME/Trading-Development/2.„Éñ„É¨„Ç§„ÇØ„Ç¢„Ç¶„ÉàÊâãÊ≥ï„Éó„É≠„Ç∏„Çß„ÇØ„Éà"
    
    # ClaudeË®≠ÂÆöÁ¢∫Ë™ç
    if [ -f "$HOME/.claude/settings.json" ]; then
        echo "üìÑ ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´Áä∂Ê≥Å:"
        echo "  - „Çµ„Ç§„Ç∫: $(stat -c%s "$HOME/.claude/settings.json") bytes"
        echo "  - ÊúÄÁµÇÊõ¥Êñ∞: $(stat -c%y "$HOME/.claude/settings.json")"
        
        if python3 -m json.tool "$HOME/.claude/settings.json" >/dev/null 2>&1; then
            echo "  - ÊßãÊñáÁä∂Ê≥Å: ‚úÖ Ê≠£Â∏∏"
        else
            echo "  - ÊßãÊñáÁä∂Ê≥Å: ‚ùå „Ç®„É©„Éº„ÅÇ„Çä"
        fi
    else
        echo "üìÑ ClaudeË®≠ÂÆö„Éï„Ç°„Ç§„É´: Êú™Â≠òÂú®"
    fi
    echo
    
    # MCPË®≠ÂÆöÁ¢∫Ë™ç
    if [ -f "$HOME/.config/claude-desktop/config.json" ]; then
        echo "üìÑ MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´Áä∂Ê≥Å:"
        echo "  - „Çµ„Ç§„Ç∫: $(stat -c%s "$HOME/.config/claude-desktop/config.json") bytes"
        echo "  - ÊúÄÁµÇÊõ¥Êñ∞: $(stat -c%y "$HOME/.config/claude-desktop/config.json")"
        
        if python3 -m json.tool "$HOME/.config/claude-desktop/config.json" >/dev/null 2>&1; then
            echo "  - ÊßãÊñáÁä∂Ê≥Å: ‚úÖ Ê≠£Â∏∏"
        else
            echo "  - ÊßãÊñáÁä∂Ê≥Å: ‚ùå „Ç®„É©„Éº„ÅÇ„Çä"
        fi
        
        if grep -q "YOUR_GEMINI_API_KEY_HERE" "$HOME/.config/claude-desktop/config.json"; then
            echo "  - API„Ç≠„Éº: ‚ö†Ô∏è Êú™Ë®≠ÂÆö"
        else
            echo "  - API„Ç≠„Éº: ‚úÖ Ë®≠ÂÆöÊ∏à„Åø"
        fi
    else
        echo "üìÑ MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´: Êú™Â≠òÂú®"
    fi
    echo
    
    # „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞Á¢∫Ë™ç
    echo "üìã ÊúÄËøë„ÅÆ„Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞ („Ç®„É©„ÉºÈñ¢ÈÄ£):"
    if journalctl --no-pager -n 20 -p err 2>/dev/null | head -10; then
        :
    else
        echo "  „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„Å´„Ç¢„ÇØ„Çª„Çπ„Åß„Åç„Åæ„Åõ„Çì"
    fi
    echo
    
    # ÁßªË°åÊ§úË®º„É¨„Éù„Éº„ÉàÁ¢∫Ë™ç
    if [ -d "$PROJECT_DIR" ]; then
        cd "$PROJECT_DIR"
        echo "üìä ÁßªË°åÊ§úË®º„É¨„Éù„Éº„Éà:"
        if ls migration_verification_report_*.txt 2>/dev/null | head -3; then
            echo "  ÊúÄÊñ∞„É¨„Éù„Éº„ÉàÂÜÖÂÆπ:"
            LATEST_REPORT=$(ls -t migration_verification_report_*.txt 2>/dev/null | head -1)
            if [ -n "$LATEST_REPORT" ]; then
                cat "$LATEST_REPORT"
            fi
        else
            echo "  ÁßªË°åÊ§úË®º„É¨„Éù„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        fi
    fi
}

# „É°„Ç§„É≥ÂÆüË°å
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi