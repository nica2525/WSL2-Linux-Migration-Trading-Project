#!/bin/bash
# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ëá™ÂãïÂæ©ÂÖÉ„Çπ„ÇØ„É™„Éó„Éà - WSL2‚ÜíNative LinuxÁßªË°å
# ÂÆüË°å: bash config_restore.sh

set -euo pipefail  # „Ç®„É©„ÉºÊôÇÂç≥Â∫ß„Å´ÂÅúÊ≠¢

# Ëâ≤‰ªò„Åç„É≠„Ç∞Âá∫Âäõ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
error_handler() {
    log_error "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü (Ë°å: $1)"
    log_error "Âæ©ÂÖÉ„Çí‰∏≠Ê≠¢„Åó„Åæ„Åô„ÄÇÂïèÈ°å„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    exit 1
}

trap 'error_handler $LINENO' ERR

log_info "=== WSL2‚ÜíLinuxÁßªË°å: Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉÈñãÂßã ==="

# 1. Áí∞Â¢ÉÂ§âÊï∞„Éª„Éë„ÇπË®≠ÂÆö
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
CLAUDE_CONFIG_DIR="$HOME/.claude"
CLAUDE_HOOKS_DIR="$CLAUDE_CONFIG_DIR/hooks"
CLAUDE_DESKTOP_CONFIG_DIR="$HOME/.config/claude-desktop"

log_info "Ë®≠ÂÆöÊÉÖÂ†±:"
echo "  - „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™: $PROJECT_DIR"
echo "  - ClaudeË®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™: $CLAUDE_CONFIG_DIR"
echo "  - Claude DesktopË®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™: $CLAUDE_DESKTOP_CONFIG_DIR"

# 2. „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
log_info "Ë®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê‰∏≠..."
mkdir -p "$CLAUDE_CONFIG_DIR"
mkdir -p "$CLAUDE_HOOKS_DIR"
mkdir -p "$CLAUDE_DESKTOP_CONFIG_DIR"

log_success "Ë®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàêÂÆå‰∫Ü"

# 3. Claude Code HooksË®≠ÂÆöÂæ©ÂÖÉ
log_info "Claude Code HooksË®≠ÂÆöÂæ©ÂÖÉ‰∏≠..."

# settings.json „ÉÜ„É≥„Éó„É¨„Éº„Éà‰ΩúÊàê
cat > "$CLAUDE_CONFIG_DIR/settings.json" << EOF
{
  "hooks": {
    "sessionStart": {
      "command": "$CLAUDE_HOOKS_DIR/sessionStart.sh",
      "description": "Sub-AgentÂìÅË≥™ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï„ÉÅ„Çß„ÉÉ„ÇØ",
      "timeout": 30000,
      "showOutput": true
    },
    "PreToolUse": [
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/session_record_rule_checker.sh"
          },
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/document_rule_enforcer.sh"
          }
        ]
      },
      {
        "matcher": "Edit.*JamesORB.*\\\\.mq5",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/ea_version_control_rules_safe.sh"
          }
        ]
      },
      {
        "matcher": "Edit.*\\\\.mq5|Write.*\\\\.mq5",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_HOOKS_DIR/mql5_implementation_guardian.sh \\\"\\\${file_path}\\\" \\\"\\\${operation}\\\"",
            "description": "MQL5ÂÆüË£ÖÂâçÊ§úË®ºÔºàHookÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ôºâ",
            "timeout": 15000,
            "showOutput": true
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/memory_tracker_hook.sh"
          }
        ]
      },
      {
        "matcher": "Edit.*JamesORB.*\\\\.mq5",
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/ea_post_edit_sync_safe.sh"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "/bin/bash $PROJECT_DIR/Scripts/session_start_memory.sh"
          }
        ]
      }
    ],
    "onError": {
      "command": "$CLAUDE_HOOKS_DIR/error_learning_system.sh \\\"\\\${error_type}\\\" \\\"\\\${error_message}\\\" \\\"\\\${source}\\\"",
      "description": "„Ç®„É©„ÉºÁô∫ÁîüÊôÇËá™ÂãïÂ≠¶Áøí„Ç∑„Çπ„ÉÜ„É†",
      "timeout": 15000,
      "showOutput": false
    }
  },
  "slashCommands": {
    "/session-start": "„Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßãÊôÇ„ÅÆÂøÖÈ†àÁ¢∫Ë™ç„Éó„É≠„Éà„Ç≥„É´„ÇíÂÆüË°å:\\n1. cronËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†Á¢∫Ë™ç\\n2. ÊúÄÊñ∞„Çª„ÉÉ„Ç∑„Éß„É≥Ë®òÈå≤Á¢∫Ë™ç\\n3. Git‰ΩúÊ•≠Â±•Ê≠¥Á¢∫Ë™ç\\n4. ÂìÅË≥™Áä∂Ê≥ÅÁ¢∫Ë™ç\\n5. „Éû„Éç„Éº„Ç∏„É£„ÉºÂ≠¶Áøí„É≠„Ç∞Á¢∫Ë™ç",
    "/backtest-check": "MT5„Éê„ÉÉ„ÇØ„ÉÜ„Çπ„ÉàÁä∂Ê≥ÅÁ¢∫Ë™ç:\\n1. MT5_Results/„Éï„Ç©„É´„ÉÄÁ¢∫Ë™ç\\n2. ÊúÄÊñ∞xlsxÁµêÊûú„Éï„Ç°„Ç§„É´Á¢∫Ë™çÔºàReport„Éê„ÉÉ„ÇØ„ÉÜ„Çπ„Éà„ÉªReport„Éï„Ç©„ÉØ„Éº„ÉâÔºâ\\n3. Êìç‰Ωú„É≠„Ç∞.txtÁ¢∫Ë™ç\\n4. JamesORB EAÂãï‰ΩúÂàÜÊûê\\n5. Ê¨°Âõû‰ΩúÊ•≠È†ÖÁõÆÊï¥ÁêÜ"
  },
  "feedbackSurveyState": {
    "lastShownTime": $(date +%s)000
  }
}
EOF

log_success "Claude Code settings.json Âæ©ÂÖÉÂÆå‰∫Ü"

# 4. Hook„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàê
log_info "Hook„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàê‰∏≠..."

# sessionStart.sh ‰ΩúÊàê
cat > "$CLAUDE_HOOKS_DIR/sessionStart.sh" << 'EOF'
#!/bin/bash
# „Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßãÊôÇ„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà

echo "üöÄ Sub-AgentÂìÅË≥™ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï„ÉÅ„Çß„ÉÉ„ÇØ"

# Âü∫Êú¨„Ç∑„Çπ„ÉÜ„É†Á¢∫Ë™ç
echo "‚úÖ „Ç∑„Çπ„ÉÜ„É†ÊôÇÂàª: $(date)"
echo "‚úÖ ‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™: $(pwd)"

# Python„ÉªNode.jsÁ¢∫Ë™ç
if command -v python3 >/dev/null 2>&1; then
    echo "‚úÖ Python: $(python3 --version)"
else
    echo "‚ùå Python3„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
fi

if command -v node >/dev/null 2>&1; then
    echo "‚úÖ Node.js: $(node --version)"
else
    echo "‚ùå Node.js„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
fi

# MCPÊé•Á∂öÁ¢∫Ë™çÔºàÁ∞°ÊòìÔºâ
if command -v claude >/dev/null 2>&1; then
    echo "‚úÖ Claude Code: $(claude --version 2>/dev/null | head -1 || echo 'Á¢∫Ë™çÂ§±Êïó')"
else
    echo "‚ùå Claude Code„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
fi

echo "üéØ „Çª„ÉÉ„Ç∑„Éß„É≥ÈñãÂßãÊ∫ñÂÇôÂÆå‰∫Ü"
EOF

chmod +x "$CLAUDE_HOOKS_DIR/sessionStart.sh"

# mql5_implementation_guardian.sh ‰ΩúÊàê
cat > "$CLAUDE_HOOKS_DIR/mql5_implementation_guardian.sh" << 'EOF'
#!/bin/bash
# MQL5ÂÆüË£ÖÂâçÊ§úË®º„Çπ„ÇØ„É™„Éó„Éà

FILE_PATH="$1"
OPERATION="$2"

echo "üõ°Ô∏è MQL5ÂÆüË£ÖÂâçÊ§úË®ºÈñãÂßã"
echo "„Éï„Ç°„Ç§„É´: $FILE_PATH"
echo "Êìç‰Ωú: $OPERATION"

# „Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç
if [ -n "$FILE_PATH" ] && [ -f "$FILE_PATH" ]; then
    echo "‚úÖ „Éï„Ç°„Ç§„É´Á¢∫Ë™ç: $(basename "$FILE_PATH")"
    
    # MQL5ÊßãÊñá„ÅÆÂü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
    if grep -q "OnInit\|OnTick\|OnDeinit" "$FILE_PATH"; then
        echo "‚úÖ MQL5Âü∫Êú¨ÊßãÈÄ†Á¢∫Ë™ç"
    else
        echo "‚ö†Ô∏è MQL5Âü∫Êú¨ÊßãÈÄ†„ÅÆÁ¢∫Ë™çÊé®Â•®"
    fi
    
    # Âç±Èô∫„Å™„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ
    if grep -q "delete\|free\|malloc" "$FILE_PATH"; then
        echo "‚ö†Ô∏è „É°„É¢„É™ÁÆ°ÁêÜÈñ¢Êï∞„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü - ÊÖéÈáç„Å´Á¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
    fi
    
else
    echo "‚ö†Ô∏è „Éï„Ç°„Ç§„É´„Éë„Çπ„ÅåÊú™ÊåáÂÆö„Åæ„Åü„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
fi

echo "üéØ MQL5ÂÆüË£ÖÂâçÊ§úË®ºÂÆå‰∫Ü"
EOF

chmod +x "$CLAUDE_HOOKS_DIR/mql5_implementation_guardian.sh"

# error_learning_system.sh ‰ΩúÊàê
cat > "$CLAUDE_HOOKS_DIR/error_learning_system.sh" << 'EOF'
#!/bin/bash
# „Ç®„É©„ÉºÂ≠¶Áøí„Ç∑„Çπ„ÉÜ„É†

ERROR_TYPE="$1"
ERROR_MESSAGE="$2"
SOURCE="$3"

echo "üö® „Ç®„É©„ÉºÂ≠¶Áøí„Ç∑„Çπ„ÉÜ„É†Ëµ∑Âãï"
echo "„Ç®„É©„Éº„Çø„Ç§„Éó: $ERROR_TYPE"
echo "„ÇΩ„Éº„Çπ: $SOURCE"

# „É≠„Ç∞„Éï„Ç°„Ç§„É´‰ΩúÊàê
LOG_FILE="$HOME/.claude/error_learning.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo "[$TIMESTAMP] $ERROR_TYPE - $SOURCE: $ERROR_MESSAGE" >> "$LOG_FILE"

echo "üìù „Ç®„É©„Éº„É≠„Ç∞Ë®òÈå≤ÂÆå‰∫Ü: $LOG_FILE"
EOF

chmod +x "$CLAUDE_HOOKS_DIR/error_learning_system.sh"

log_success "Hook„Çπ„ÇØ„É™„Éó„Éà‰ΩúÊàêÂÆå‰∫Ü"

# 5. MCPË®≠ÂÆöÂæ©ÂÖÉ
log_info "MCPË®≠ÂÆöÂæ©ÂÖÉ‰∏≠..."

# config.json „ÉÜ„É≥„Éó„É¨„Éº„Éà‰ΩúÊàêÔºàAPI„Ç≠„ÉºË¶ÅÊâãÂãïÂÖ•ÂäõÔºâ
cat > "$CLAUDE_DESKTOP_CONFIG_DIR/config.json" << 'EOF'
{
  "mcpServers": {
    "gemini": {
      "command": "npx",
      "args": ["-y", "@yusukedev/gemini-cli-mcp"],
      "env": {
        "GEMINI_API_KEY": "YOUR_GEMINI_API_KEY_HERE",
        "GEMINI_MODEL": "gemini-2.0-flash",
        "GEMINI_TIMEOUT": "180000",
        "GEMINI_AUTO_FALLBACK": "true"
      }
    }
  }
}
EOF

log_warning "MCPË®≠ÂÆö„Éï„Ç°„Ç§„É´‰ΩúÊàêÂÆå‰∫Ü - API„Ç≠„Éº„ÅÆÊâãÂãïË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô"

# 6. „Éë„ÇπË™øÊï¥„ÅÆÂÆüË°å
log_info "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÂÜÖ„ÅÆ„Éë„ÇπË™øÊï¥ÂÆüË°å‰∏≠..."

# settings.json„ÅÆÁµ∂ÂØæ„Éë„ÇπÁ¢∫Ë™ç„ÉªË™øÊï¥
if [ -f "$CLAUDE_CONFIG_DIR/settings.json" ]; then
    # „Éë„ÇπÁΩÆÊèõÂÆüË°åÔºàÂÆüÈöõ„ÅÆ„Éë„Çπ„ÅßÊõ¥Êñ∞Ê∏à„ÅøÔºâ
    log_success "settings.json „Éë„ÇπË™øÊï¥ÂÆå‰∫Ü"
else
    log_error "settings.json „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
    exit 1
fi

# 7. Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©ÈôêË®≠ÂÆö
log_info "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©ÈôêË®≠ÂÆö‰∏≠..."

# ÈÅ©Âàá„Å™Ê®©ÈôêË®≠ÂÆö
chmod 600 "$CLAUDE_CONFIG_DIR/settings.json" 2>/dev/null || true
chmod 600 "$CLAUDE_DESKTOP_CONFIG_DIR/config.json" 2>/dev/null || true
chmod -R 755 "$CLAUDE_HOOKS_DIR" 2>/dev/null || true

log_success "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©ÈôêË®≠ÂÆöÂÆå‰∫Ü"

# 8. Ë®≠ÂÆöÂÜÖÂÆπÊ§úË®º
log_info "Ë®≠ÂÆöÂÜÖÂÆπÊ§úË®º‰∏≠..."

# settings.jsonÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ
if ! python3 -m json.tool "$CLAUDE_CONFIG_DIR/settings.json" >/dev/null 2>&1; then
    log_error "settings.json „ÅÆÊßãÊñá„Ç®„É©„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü"
    exit 1
fi

# config.jsonÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ
if ! python3 -m json.tool "$CLAUDE_DESKTOP_CONFIG_DIR/config.json" >/dev/null 2>&1; then
    log_error "config.json „ÅÆÊßãÊñá„Ç®„É©„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü"
    exit 1
fi

log_success "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´ÊßãÊñáÊ§úË®ºÂÆå‰∫Ü"

# 9. ‰æùÂ≠ò„Çπ„ÇØ„É™„Éó„ÉàÂ≠òÂú®Á¢∫Ë™ç
log_info "‰æùÂ≠ò„Çπ„ÇØ„É™„Éó„ÉàÂ≠òÂú®Á¢∫Ë™ç‰∏≠..."

REQUIRED_SCRIPTS=(
    "$PROJECT_DIR/Scripts/session_record_rule_checker.sh"
    "$PROJECT_DIR/Scripts/document_rule_enforcer.sh"
    "$PROJECT_DIR/Scripts/ea_version_control_rules_safe.sh"
    "$PROJECT_DIR/Scripts/memory_tracker_hook.sh"
    "$PROJECT_DIR/Scripts/ea_post_edit_sync_safe.sh"
    "$PROJECT_DIR/Scripts/session_start_memory.sh"
)

MISSING_SCRIPTS=()
for script in "${REQUIRED_SCRIPTS[@]}"; do
    if [ -f "$script" ]; then
        # ÂÆüË°åÊ®©ÈôêÁ¢∫Ë™ç„Éª‰ªò‰∏é
        chmod +x "$script" 2>/dev/null || true
        log_success "‚úì $(basename "$script")"
    else
        log_warning "‚úó $(basename "$script") (Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì)"
        MISSING_SCRIPTS+=("$script")
    fi
done

if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
    log_warning "‰∏ÄÈÉ®„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇÊ©üËÉΩÂà∂Èôê„Åå„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ"
fi

# 10. ÊúÄÁµÇË®≠ÂÆöÁ¢∫Ë™ç
log_info "ÊúÄÁµÇË®≠ÂÆöÁ¢∫Ë™ç..."

echo "üìã Âæ©ÂÖÉ„Åï„Çå„ÅüË®≠ÂÆö:"
echo "  - ClaudeË®≠ÂÆö: $CLAUDE_CONFIG_DIR/settings.json"
echo "  - MCPË®≠ÂÆö: $CLAUDE_DESKTOP_CONFIG_DIR/config.json"
echo "  - Hooks„Çπ„ÇØ„É™„Éó„Éà: $CLAUDE_HOOKS_DIR/ ($(ls "$CLAUDE_HOOKS_DIR" | wc -l)ÂÄã)"
echo "  - ‰æùÂ≠ò„Çπ„ÇØ„É™„Éó„Éà: $(( ${#REQUIRED_SCRIPTS[@]} - ${#MISSING_SCRIPTS[@]} ))/${#REQUIRED_SCRIPTS[@]} ÂÄãÂà©Áî®ÂèØËÉΩ"

# 11. ÊâãÂãïË®≠ÂÆöÂøÖË¶Å‰∫ãÈ†Ö„ÅÆË°®Á§∫
log_success "=== Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉÂÆå‰∫Ü ==="
echo
echo "üîß ÊâãÂãïË®≠ÂÆö„ÅåÂøÖË¶Å„Å™È†ÖÁõÆ:"
echo
echo "1. **Gemini API„Ç≠„ÉºË®≠ÂÆö** (ÂøÖÈ†à):"
echo "   „Éï„Ç°„Ç§„É´: $CLAUDE_DESKTOP_CONFIG_DIR/config.json"
echo "   Ë®≠ÂÆöÈ†ÖÁõÆ: GEMINI_API_KEY"
echo "   ÁèæÂú®„ÅÆÂÄ§: YOUR_GEMINI_API_KEY_HERE"
echo "   ‚Üí ÂÆüÈöõ„ÅÆGemini API„Ç≠„Éº„Å´ÁΩÆÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
echo
echo "2. **Claude CodeË™çË®º** (ÂøÖÈ†à):"
echo "   ÂÆüË°å„Ç≥„Éû„É≥„Éâ: claude auth login"
echo
echo "3. **GitË®≠ÂÆöÁ¢∫Ë™ç** (Êé®Â•®):"
echo "   git config --global user.name \"Your Name\""
echo "   git config --global user.email \"your.email@domain.com\""
echo
echo "üöÄ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:"
echo "  1. API„Ç≠„ÉºË®≠ÂÆöÂÆå‰∫ÜÂæå„ÄÅÁßªË°åÊ§úË®º„ÇíÂÆüË°å:"
echo "     bash Scripts/migration/migration_verification.sh"
echo "  2. Claude CodeËµ∑Âãï„ÉÜ„Çπ„Éà:"
echo "     claude --version"
echo

# 12. API„Ç≠„ÉºË®≠ÂÆö„Éò„É´„Éë„Éº
read -p "‰ªä„Åô„ÅêGemini API„Ç≠„Éº„ÇíË®≠ÂÆö„Åó„Åæ„Åô„ÅãÔºü (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Gemini API„Ç≠„Éº„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:"
    read -r API_KEY
    
    if [ -n "$API_KEY" ] && [ "$API_KEY" != "YOUR_GEMINI_API_KEY_HERE" ]; then
        # API„Ç≠„ÉºÁΩÆÊèõ
        sed -i "s/YOUR_GEMINI_API_KEY_HERE/$API_KEY/g" "$CLAUDE_DESKTOP_CONFIG_DIR/config.json"
        log_success "Gemini API„Ç≠„ÉºË®≠ÂÆöÂÆå‰∫Ü"
        
        # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Ê®©ÈôêÂÜçË®≠ÂÆö
        chmod 600 "$CLAUDE_DESKTOP_CONFIG_DIR/config.json"
        
        echo "üéâ MCPË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
    else
        log_warning "API„Ç≠„Éº„ÅåÂÖ•Âäõ„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÂæå„ÅßÊâãÂãïË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
    fi
else
    log_info "API„Ç≠„ÉºË®≠ÂÆö„ÅØÂæå„ÅßÊâãÂãïÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
fi

log_info "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´Âæ©ÂÖÉ„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"