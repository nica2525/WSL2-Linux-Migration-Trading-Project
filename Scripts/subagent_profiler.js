#!/usr/bin/env node
/**
 * Sub-AgentÂÆüË°å„Éó„É≠„Éï„Ç°„Ç§„É©„Éº
 * clinic.js„Çí‰ΩøÁî®„Åó„Å¶Sub-AgentÂÆüË°åÊôÇ„ÅÆ„É°„É¢„É™„ÉªCPU‰ΩøÁî®Èáè„ÇíÁõ£Ë¶ñ
 * Âæ™Áí∞ÂèÇÁÖß„Éª„É°„É¢„É™„É™„Éº„ÇØÊ§úÂá∫Ê©üËÉΩ‰ªò„Åç
 */

const fs = require('fs');
const path = require('path');
const { spawn, exec } = require('child_process');
const { promisify } = require('util');

// „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Çí„É≠„Éº„Éâ
require('./nodejs_error_handler.js');

const execAsync = promisify(exec);

// Ë®≠ÂÆö
const CONFIG = {
    PROJECT_DIR: path.join(__dirname, '..'),
    PROFILE_DIR: path.join(__dirname, '..', 'Logs', 'profiles'),
    LOG_FILE: path.join(__dirname, '..', 'Logs', 'subagent_profiler.log'),
    TIMEOUT_MS: 300000, // 5ÂàÜ„Çø„Ç§„É†„Ç¢„Ç¶„Éà
    MEMORY_THRESHOLD_MB: 500, // „É°„É¢„É™Ë≠¶ÂëäÈñ•ÂÄ§
    HEAP_DUMP_THRESHOLD_MB: 1000 // „Éí„Éº„Éó„ÉÄ„É≥„Éó‰ΩúÊàêÈñæÂÄ§
};

// „É≠„Ç∞Âá∫ÂäõÈñ¢Êï∞
function log(level, message, data = {}) {
    const timestamp = new Date().toISOString();
    const logEntry = {
        timestamp,
        level,
        message,
        pid: process.pid,
        memoryUsage: process.memoryUsage(),
        ...data
    };

    const logLine = `[${timestamp}] [${level}] ${message} ${JSON.stringify(data)}\n`;

    // „Éï„Ç°„Ç§„É´„É≠„Ç∞
    fs.appendFileSync(CONFIG.LOG_FILE, logLine);

    // „Ç≥„É≥„ÇΩ„Éº„É´Âá∫Âäõ
    if (level === 'ERROR' || level === 'WARNING') {
        console.error(logLine.trim());
    } else {
        console.log(logLine.trim());
    }
}

// „Éó„É≠„Éï„Ç°„Ç§„É´„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
function ensureProfileDir() {
    if (!fs.existsSync(CONFIG.PROFILE_DIR)) {
        fs.mkdirSync(CONFIG.PROFILE_DIR, { recursive: true });
        log('INFO', 'Profile directory created', { dir: CONFIG.PROFILE_DIR });
    }
}

// „É°„É¢„É™‰ΩøÁî®ÈáèÁõ£Ë¶ñ
function startMemoryMonitoring(targetPid) {
    const interval = setInterval(() => {
        try {
            const usage = process.memoryUsage();
            const heapUsedMB = Math.round(usage.heapUsed / 1024 / 1024);
            const heapTotalMB = Math.round(usage.heapTotal / 1024 / 1024);

            log('INFO', 'Memory usage', {
                pid: targetPid,
                heapUsedMB,
                heapTotalMB,
                rss: Math.round(usage.rss / 1024 / 1024),
                external: Math.round(usage.external / 1024 / 1024)
            });

            // „É°„É¢„É™Ë≠¶Âëä
            if (heapUsedMB > CONFIG.MEMORY_THRESHOLD_MB) {
                log('WARNING', 'High memory usage detected', {
                    heapUsedMB,
                    threshold: CONFIG.MEMORY_THRESHOLD_MB
                });
            }

            // „Éí„Éº„Éó„ÉÄ„É≥„Éó‰ΩúÊàê
            if (heapUsedMB > CONFIG.HEAP_DUMP_THRESHOLD_MB) {
                createHeapDump(targetPid);
            }

        } catch (error) {
            log('ERROR', 'Memory monitoring error', { error: error.message });
        }
    }, 10000); // 10ÁßíÈñìÈöî

    return interval;
}

// „Éí„Éº„Éó„ÉÄ„É≥„Éó‰ΩúÊàê
async function createHeapDump(pid) {
    try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const dumpFile = path.join(CONFIG.PROFILE_DIR, `heap-${pid}-${timestamp}.heapsnapshot`);

        // Node.jsÂÜÖËîµ„ÅÆheapdumpÊ©üËÉΩ„Çí‰ΩøÁî®
        const heapdump = require('v8').writeHeapSnapshot;
        const filename = heapdump(dumpFile);

        log('INFO', 'Heap dump created', {
            file: filename,
            pid: pid,
            size: fs.statSync(filename).size
        });

        return filename;
    } catch (error) {
        log('ERROR', 'Failed to create heap dump', { error: error.message });
        return null;
    }
}

// „Éó„É≠„Çª„ÇπÁõ£Ë¶ñ
function monitorProcess(pid, timeout = CONFIG.TIMEOUT_MS) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        let isResolved = false;

        // „É°„É¢„É™Áõ£Ë¶ñÈñãÂßã
        const memoryInterval = startMemoryMonitoring(pid);

        // „Éó„É≠„Çª„ÇπÂ≠òÂú®Á¢∫Ë™ç
        const checkInterval = setInterval(() => {
            try {
                process.kill(pid, 0); // „Éó„É≠„Çª„ÇπÂ≠òÂú®Á¢∫Ë™çÔºà„Ç∑„Ç∞„Éä„É´ÈÄÅ‰ø°„Å™„ÅóÔºâ

                const elapsed = Date.now() - startTime;
                if (elapsed > timeout) {
                    clearInterval(checkInterval);
                    clearInterval(memoryInterval);

                    if (!isResolved) {
                        isResolved = true;
                        log('WARNING', 'Process monitoring timeout', {
                            pid,
                            elapsed,
                            timeout
                        });
                        resolve({ status: 'timeout', elapsed });
                    }
                }
            } catch (error) {
                // „Éó„É≠„Çª„ÇπÁµÇ‰∫Ü
                clearInterval(checkInterval);
                clearInterval(memoryInterval);

                if (!isResolved) {
                    isResolved = true;
                    const elapsed = Date.now() - startTime;
                    log('INFO', 'Process completed', {
                        pid,
                        elapsed,
                        exitReason: error.code
                    });
                    resolve({ status: 'completed', elapsed });
                }
            }
        }, 1000); // 1ÁßíÈñìÈöî

        // Á∑äÊÄ•ÂÅúÊ≠¢Áî®„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        setTimeout(() => {
            clearInterval(checkInterval);
            clearInterval(memoryInterval);

            if (!isResolved) {
                isResolved = true;
                log('ERROR', 'Hard timeout reached', { pid, timeout });
                reject(new Error(`Process monitoring hard timeout: ${timeout}ms`));
            }
        }, timeout + 30000); // „Çø„Ç§„É†„Ç¢„Ç¶„Éà + 30Áßí
    });
}

// Clinic.js DoctorÂÆüË°å
async function runClinicDoctor(command, args = []) {
    return new Promise((resolve, reject) => {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const outputDir = path.join(CONFIG.PROFILE_DIR, `doctor-${timestamp}`);

        log('INFO', 'Starting clinic doctor', {
            command,
            args,
            outputDir
        });

        const clinicArgs = [
            'doctor',
            '--dest', outputDir,
            '--on-port', 'echo Profile started on port',
            command,
            ...args
        ];

        const clinicProcess = spawn('clinic', clinicArgs, {
            stdio: ['pipe', 'pipe', 'pipe'],
            cwd: CONFIG.PROJECT_DIR
        });

        let stdout = '';
        let stderr = '';

        clinicProcess.stdout.on('data', (data) => {
            stdout += data.toString();
            log('INFO', 'Clinic stdout', { data: data.toString().trim() });
        });

        clinicProcess.stderr.on('data', (data) => {
            stderr += data.toString();
            log('WARNING', 'Clinic stderr', { data: data.toString().trim() });
        });

        clinicProcess.on('close', (code) => {
            log('INFO', 'Clinic doctor completed', {
                code,
                outputDir,
                stdoutLength: stdout.length,
                stderrLength: stderr.length
            });

            resolve({
                code,
                stdout,
                stderr,
                outputDir
            });
        });

        clinicProcess.on('error', (error) => {
            log('ERROR', 'Clinic doctor error', { error: error.message });
            reject(error);
        });

        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÁõ£Ë¶ñ
        setTimeout(() => {
            if (clinicProcess.pid) {
                log('WARNING', 'Clinic doctor timeout, killing process', {
                    pid: clinicProcess.pid
                });
                clinicProcess.kill('SIGKILL');
                reject(new Error('Clinic doctor timeout'));
            }
        }, CONFIG.TIMEOUT_MS);
    });
}

// „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞
async function main() {
    log('INFO', 'Sub-Agent Profiler started', {
        config: CONFIG,
        nodeVersion: process.version,
        platform: process.platform
    });

    ensureProfileDir();

    // ‰ΩøÁî®‰æã: Node.js„Çπ„ÇØ„É™„Éó„Éà„ÅÆ„Éó„É≠„Éï„Ç°„Ç§„É™„É≥„Ç∞
    if (process.argv.length > 2) {
        const targetScript = process.argv[2];
        const scriptArgs = process.argv.slice(3);

        try {
            log('INFO', 'Starting profiling session', {
                script: targetScript,
                args: scriptArgs
            });

            const result = await runClinicDoctor('node', [targetScript, ...scriptArgs]);

            log('INFO', 'Profiling completed', {
                result: {
                    code: result.code,
                    outputDir: result.outputDir
                }
            });

            console.log(`\n‚úÖ Profiling completed!`);
            console.log(`üìä Results: ${result.outputDir}`);
            console.log(`üìù Log: ${CONFIG.LOG_FILE}`);

        } catch (error) {
            log('ERROR', 'Profiling failed', { error: error.message });
            console.error(`‚ùå Profiling failed: ${error.message}`);
            process.exit(1);
        }
    } else {
        console.log('Usage: node subagent_profiler.js <script> [args...]');
        console.log('Example: node subagent_profiler.js test_script.js');
        process.exit(1);
    }
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('uncaughtException', (error) => {
    log('ERROR', 'Uncaught exception in profiler', { error: error.message, stack: error.stack });
    process.exit(1);
});

process.on('unhandledRejection', (reason) => {
    log('ERROR', 'Unhandled rejection in profiler', { reason: reason?.message || reason });
    process.exit(1);
});

// ÂÆüË°å
if (require.main === module) {
    main().catch(error => {
        log('ERROR', 'Main execution failed', { error: error.message });
        process.exit(1);
    });
}

module.exports = {
    runClinicDoctor,
    monitorProcess,
    createHeapDump,
    log
};
